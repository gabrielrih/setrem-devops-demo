name: Python application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  DEV_TAG: devops-demo-app:dev
  LATEST_TAG: devops-demo-app:latest

permissions:
  contents: read

jobs:
  unit_tests:
    runs-on: ubuntu-latest
    name: Unit tests and code coverage
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements/dev.txt ]; then pip install -r requirements/dev.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Run unit tests and generate code coverage report
        run: |
          coverage run -m pytest test/unit
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  security_scan:
    runs-on: ubuntu-latest
    name: Security scan
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements/dev.txt ]; then pip install -r requirements/dev.txt; fi
      - name: Vulnerability scan using safety package
        run: |
          safety check -r requirements/dev.txt
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  build_image:
    runs-on: ubuntu-latest
    name: Build and push docker image
    needs: [unit_tests, security_scan]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push image to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.LATEST_TAG }}
  integration_test:
    runs-on: ubuntu-latest
    name: Run integration tests
    needs: [build_image]
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements/dev.txt ]; then pip install -r requirements/dev.txt; fi
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Run integration tests
        run: |
          docker_image="${{ secrets.DOCKERHUB_USERNAME}}/${{ env.LATEST_TAG }}"
          echo "Getting image $docker_image"
          docker pull $docker_image

          echo "Printing images for debugging"
          docker image ls
          
          echo "Starting a container for testing"
          docker run --rm -d -p 5000:5000 $docker_image
          
          echo "Listing the running containers and listener"
          docker container ls
          
          echo "Open ports"
          netstat -nat | grep 5000
          
          # echo "Run curl for test connection"
          # curl http://localhost:5000/api/food/

          echo "Run integration tests"
          pytest test/integration
      - name: Stop container
        run: |
          container_name="${{ secrets.DOCKERHUB_USERNAME}}/${{ env.LATEST_TAG }}"
          docker stop $container_name
